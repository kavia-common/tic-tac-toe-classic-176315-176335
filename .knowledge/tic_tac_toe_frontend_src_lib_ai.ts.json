{"is_source_file": true, "format": "TypeScript", "description": "This file contains AI logic for a Tic-Tac-Toe game, including functions for minimax algorithm, heuristics, and move calculation.", "external_files": ["../types", "./game"], "external_methods": ["checkWinner", "getEmptyIndices", "nextPlayer"], "published": ["computeBestMove"], "classes": [], "methods": [{"name": "function score(board: BoardState, ai: Player, human: Player, depth: number): number { score", "description": "Calculates a score for the current board state from the AI's perspective, considering immediate wins or losses.", "scope": "", "scopeKind": ""}, {"name": "function minimax(board: BoardState, ai: Player, human: Player, player: Player, depth: number): {/ minimax", "description": "Implements the minimax algorithm to evaluate best moves recursively for the AI.", "scope": "", "scopeKind": ""}, {"name": "function immediateWinOrBlock(board: BoardState, me: Player, opp: Player): number | null { immediateWinOrBlock", "description": "Checks if there is an immediate winning move or need to block opponent's winning move.", "scope": "", "scopeKind": ""}, {"name": "function heuristicMove(board: BoardState): number { heuristicMove", "description": "Selects a heuristic move prioritizing the center, corners, or first available spot.", "scope": "", "scopeKind": ""}, {"name": "export function computeBestMove(board: BoardState, ai: Player, human: Player): number { computeBestMove", "description": "Public function to compute the best move for the AI, combining quick win/block and minimax strategies.", "scope": "", "scopeKind": ""}], "calls": ["checkWinner", "getEmptyIndices", "nextPlayer", "score", "minimax", "immediateWinOrBlock", "heuristicMove"], "search-terms": ["minimax", "tic-tac-toe", "AI move calculation", "heuristic move", "quick win block"], "state": 2, "file_id": 19, "knowledge_revision": 41, "git_revision": "", "ctags": [{"_type": "tag", "name": "Infinity", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-176315-176335/tic_tac_toe_frontend/src/lib/ai.ts", "pattern": "/^  let best: { index: number; score: number } = { index: -1, score: player === ai ? -Infinity : I/", "language": "TypeScript", "kind": "variable"}, {"_type": "tag", "name": "a", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-176315-176335/tic_tac_toe_frontend/src/lib/ai.ts", "pattern": "/^    const line = [board[a], board[b], board[c]];$/", "language": "TypeScript", "kind": "constant", "scope": "immediateWinOrBlock", "scopeKind": "function"}, {"_type": "tag", "name": "a", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-176315-176335/tic_tac_toe_frontend/src/lib/ai.ts", "pattern": "/^  for (const [a,b,c] of LINES) {$/", "language": "TypeScript", "kind": "constant", "scope": "immediateWinOrBlock", "scopeKind": "function"}, {"_type": "tag", "name": "b", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-176315-176335/tic_tac_toe_frontend/src/lib/ai.ts", "pattern": "/^    const cells = [a,b,c];$/", "language": "TypeScript", "kind": "constant", "scope": "immediateWinOrBlock", "scopeKind": "function"}, {"_type": "tag", "name": "b", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-176315-176335/tic_tac_toe_frontend/src/lib/ai.ts", "pattern": "/^    const line = [board[a], board[b], board[c]];$/", "language": "TypeScript", "kind": "constant", "scope": "immediateWinOrBlock", "scopeKind": "function"}, {"_type": "tag", "name": "b", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-176315-176335/tic_tac_toe_frontend/src/lib/ai.ts", "pattern": "/^  for (const [a,b,c] of LINES) {$/", "language": "TypeScript", "kind": "constant", "scope": "immediateWinOrBlock", "scopeKind": "function"}, {"_type": "tag", "name": "best", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-176315-176335/tic_tac_toe_frontend/src/lib/ai.ts", "pattern": "/^  let best: { index: number; score: number } = { index: -1, score: player === ai ? -Infinity : I/", "language": "TypeScript", "kind": "variable"}, {"_type": "tag", "name": "board", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-176315-176335/tic_tac_toe_frontend/src/lib/ai.ts", "pattern": "/^    const line = [board[a], board[b], board[c]];$/", "language": "TypeScript", "kind": "constant", "scope": "immediateWinOrBlock", "scopeKind": "function"}, {"_type": "tag", "name": "c", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-176315-176335/tic_tac_toe_frontend/src/lib/ai.ts", "pattern": "/^    const cells = [a,b,c];$/", "language": "TypeScript", "kind": "constant", "scope": "immediateWinOrBlock", "scopeKind": "function"}, {"_type": "tag", "name": "c", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-176315-176335/tic_tac_toe_frontend/src/lib/ai.ts", "pattern": "/^    const line = [board[a], board[b], board[c]];$/", "language": "TypeScript", "kind": "constant", "scope": "immediateWinOrBlock", "scopeKind": "function"}, {"_type": "tag", "name": "c", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-176315-176335/tic_tac_toe_frontend/src/lib/ai.ts", "pattern": "/^  for (const [a,b,c] of LINES) {$/", "language": "TypeScript", "kind": "constant", "scope": "immediateWinOrBlock", "scopeKind": "function"}, {"_type": "tag", "name": "cells", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-176315-176335/tic_tac_toe_frontend/src/lib/ai.ts", "pattern": "/^    const cells = [a,b,c];$/", "language": "TypeScript", "kind": "constant", "scope": "immediateWinOrBlock", "scopeKind": "function"}, {"_type": "tag", "name": "computeBestMove", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-176315-176335/tic_tac_toe_frontend/src/lib/ai.ts", "pattern": "/^export function computeBestMove(board: BoardState, ai: Player, human: Player): number {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "corners", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-176315-176335/tic_tac_toe_frontend/src/lib/ai.ts", "pattern": "/^  const corners = [0,2,6,8].filter(i => empties.includes(i));$/", "language": "TypeScript", "kind": "constant", "scope": "heuristicMove", "scopeKind": "function"}, {"_type": "tag", "name": "empties", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-176315-176335/tic_tac_toe_frontend/src/lib/ai.ts", "pattern": "/^  const empties = getEmptyIndices(board);$/", "language": "TypeScript", "kind": "constant", "scope": "heuristicMove", "scopeKind": "function"}, {"_type": "tag", "name": "heuristicMove", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-176315-176335/tic_tac_toe_frontend/src/lib/ai.ts", "pattern": "/^function heuristicMove(board: BoardState): number {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "idx", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-176315-176335/tic_tac_toe_frontend/src/lib/ai.ts", "pattern": "/^  for (const idx of getEmptyIndices(board)) {$/", "language": "TypeScript", "kind": "constant"}, {"_type": "tag", "name": "immediateWinOrBlock", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-176315-176335/tic_tac_toe_frontend/src/lib/ai.ts", "pattern": "/^function immediateWinOrBlock(board: BoardState, me: Player, opp: Player): number | null {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "index", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-176315-176335/tic_tac_toe_frontend/src/lib/ai.ts", "pattern": "/^  const { index } = minimax(board.slice(), ai, human, ai, 0);$/", "language": "TypeScript", "kind": "constant", "scope": "computeBestMove", "scopeKind": "function"}, {"_type": "tag", "name": "line", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-176315-176335/tic_tac_toe_frontend/src/lib/ai.ts", "pattern": "/^    const line = [board[a], board[b], board[c]];$/", "language": "TypeScript", "kind": "constant", "scope": "immediateWinOrBlock", "scopeKind": "function"}, {"_type": "tag", "name": "minimax", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-176315-176335/tic_tac_toe_frontend/src/lib/ai.ts", "pattern": "/^function minimax(board: BoardState, ai: Player, human: Player, player: Player, depth: number): {/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "quick", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-176315-176335/tic_tac_toe_frontend/src/lib/ai.ts", "pattern": "/^  const quick = immediateWinOrBlock(board.slice(), ai, human);$/", "language": "TypeScript", "kind": "constant", "scope": "computeBestMove", "scopeKind": "function"}, {"_type": "tag", "name": "result", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-176315-176335/tic_tac_toe_frontend/src/lib/ai.ts", "pattern": "/^    const result = minimax(board, ai, human, nextPlayer(player), depth + 1);$/", "language": "TypeScript", "kind": "constant"}, {"_type": "tag", "name": "score", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-176315-176335/tic_tac_toe_frontend/src/lib/ai.ts", "pattern": "/^  let best: { index: number; score: number } = { index: -1, score: player === ai ? -Infinity : I/", "language": "TypeScript", "kind": "variable"}, {"_type": "tag", "name": "score", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-176315-176335/tic_tac_toe_frontend/src/lib/ai.ts", "pattern": "/^function score(board: BoardState, ai: Player, human: Player, depth: number): number {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "w", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-176315-176335/tic_tac_toe_frontend/src/lib/ai.ts", "pattern": "/^  const w = checkWinner(board);$/", "language": "TypeScript", "kind": "constant", "scope": "score", "scopeKind": "function"}, {"_type": "tag", "name": "winner", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-176315-176335/tic_tac_toe_frontend/src/lib/ai.ts", "pattern": "/^  const winner = checkWinner(board);$/", "language": "TypeScript", "kind": "constant"}], "hash": "552be3f4808429d24ea89a8544ca7e0b", "format-version": 4, "code-base-name": "tic_tac_toe_frontend", "filename": "tic_tac_toe_frontend/src/lib/ai.ts", "fields": [{"name": "let best: { index: number; score: number } = { index: -1, score: player === ai ? -Infinity : I/", "scope": "", "scopeKind": "", "description": "unavailable"}], "revision_history": [{"41": ""}]}